/* eslint-disable @typescript-eslint/no-explicit-any */

// left is child, right is parent

import { id } from '@/utils'

import { Machine } from '.'

type Typed = {
	type: string
}

type G = Record<PropertyKey, (...props: never[]) => unknown>

export function partentMachine<
	Event extends Typed,
	LState,
	RState extends { left: LState },
	LParam = void,
	RParam = void,
	RGetters extends G = Record<never, never>,
	LGetters extends G = Record<never, never>,
	Param = void,
>(
	left: Machine<Event, LState, LParam, LGetters>,
	right: Machine<Event, RState, RParam, RGetters>,
	init: (p: Param) => RState,
	reset?: (s: RState) => RState,
) {
	const machine = new Machine<
		Event,
		RState,
		Param,
		SumGetters<LGetters, RGetters>
	>(
		init,
		(key, state) => {
        if ()
			return state.type === 'left'
				? (left._getters as any)(key, state.left)
				: (right._getters as any)(key, state.right)
		},
		(state) =>
			state.type === 'left'
				? left.isFinal(state.left)
				: right.isFinal(state.right),
	)
	left.transitions.forEach((transition, eventType) => {
		machine.addSubtransition(
			eventType,
			transition,
			{
				getter: (s) => {
					if (reset && machine.isFinal(s)) s = reset(s)
					return s?.left
				},
				setter: (left, state) => ({ ...state, left, type: 'left' }),
			},
			false,
		)
	})
	right.transitions.forEach((transition, eventType) => {
		machine.addSubtransition(
			eventType,
			transition,
			{
				getter: (s) => {
					if (reset && machine.isFinal(s)) s = reset(s)
					return s
				},
				setter: id,
			},
			false,
		)
	})
	return machine
}

type SumGetter<L, R> = L extends (...props: infer AP) => infer AR
	? R extends (...props: infer AQ) => infer QR
		? (...props: AP & AQ) => AR | QR
		: never
	: never
type SumGetters<L extends G, R extends G> = {
	[K in keyof L & keyof R]: SumGetter<L[K], R[K]>
}
